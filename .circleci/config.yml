version: 2.1

orbs:
  browser-tools: circleci/browser-tools@1.4.8

jobs:
  frontend_unit_tests:
    working_directory: ~/project
    docker:
      - image: cimg/node:21.7.3-browsers
        environment:
          TZ: "Europe/Berlin"
    steps:
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - run:
          name: Check Chrome Installation
          command: |
            google-chrome --version
            chromedriver --version
      - checkout
      - restore_cache:
          key: frontend-cache-{{ .Branch }}-{{ checksum "frontend/package-lock.json" }}
      - run:
          name: Install Dependencies
          command: |
            cd frontend
            npm install --legacy-peer-deps
      - save_cache:
          key: frontend-cache-{{ .Branch }}-{{ checksum "frontend/package-lock.json" }}
          paths:
            - "node_modules"
      - run:
          name: Run Unit Tests
          command: |
            cd frontend
            npm run test:ci

  frontend_build:
    working_directory: ~/project
    docker:
      - image: cimg/node:21.7.3
        environment:
          TZ: "Europe/Berlin"
    steps:
      - checkout
      - restore_cache:
          key: frontend-cache-{{ .Branch }}-{{ checksum "frontend/package-lock.json" }}
      - run:
          name: Install Dependencies
          command: |
            cd frontend
            npm install --legacy-peer-deps
      - save_cache:
          key: frontend-cache-{{ .Branch }}-{{ checksum "frontend/package-lock.json" }}
          paths:
            - "node_modules"
      - run:
          name: Building Client
          command: |
            cd frontend
            npm run build

  api_unit_tests:
    working_directory: ~/project
    docker:
      - image: cimg/node:21.7.3
        environment:
          TZ: "Europe/Berlin"
    steps:
      - checkout
      - restore_cache:
          key: api-cache-{{ .Branch }}-{{ checksum "api/package-lock.json" }}
      - run:
          name: Install Dependencies
          command: |
            cd api
            npm install --legacy-peer-deps
      - save_cache:
          key: api-cache-{{ .Branch }}-{{ checksum "api/package-lock.json" }}
          paths:
            - "node_modules"
      - run:
          name: Run Unit Tests
          command: |
            cd api
            npm run test:ci

  api_e2e_tests:
    working_directory: ~/project
    docker:
      - image: cimg/node:21.7.3
        environment:
          TZ: "Europe/Berlin"
    steps:
      - checkout
      - restore_cache:
          key: api-cache-{{ .Branch }}-{{ checksum "api/package-lock.json" }}
      - run:
          name: Install Dependencies
          command: |
            cd api
            npm install --legacy-peer-deps
      - save_cache:
          key: api-cache-{{ .Branch }}-{{ checksum "api/package-lock.json" }}
          paths:
            - "node_modules"
      - run:
          name: Run e2e Tests
          command: |
            cd api
            npm run test:e2e

  api_build:
    working_directory: ~/project
    docker:
      - image: cimg/node:21.7.3
        environment:
          TZ: "Europe/Berlin"
    steps:
      - checkout
      - restore_cache:
          key: api-cache-{{ .Branch }}-{{ checksum "api/package-lock.json" }}
      - run:
          name: Install Dependencies
          command: |
            cd api
            npm install --legacy-peer-deps
      - save_cache:
          key: api-cache-{{ .Branch }}-{{ checksum "api/package-lock.json" }}
          paths:
            - "node_modules"
      - run:
          name: Building API
          command: |
            cd api
            npm run build

  api_deploy:
    working_directory: ~/project
    docker:
      - image: cimg/base:2024.02
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: GitHub Container Registry Login
          command: |
            echo $GHCR_ACCESS_TOKEN | docker login ghcr.io --username $GHCR_USER --password-stdin
      - run:
          name: Build and Push API Image
          command: |
            docker build -t ghcr.io/neklas2000/projektarbeit/api:latest -f api/Dockerfile api/
            docker push ghcr.io/neklas2000/projektarbeit/api:latest

  frontend_deploy:
    working_directory: ~/project
    docker:
      - image: cimg/base:2024.02
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: GitHub Container Registry Login
          command: |
            echo $GHCR_ACCESS_TOKEN | docker login ghcr.io --username $GHCR_USER --password-stdin
      - run:
          name: Build and Push Frontend Image
          command: |
            docker build -t ghcr.io/neklas2000/projektarbeit/client:latest -f frontend/Dockerfile frontend/
            docker push ghcr.io/neklas2000/projektarbeit/client:latest

workflows:
  app_test_build_and_deploy:
    jobs:
      - frontend_unit_tests
      - frontend_build:
          requires:
            - frontend_unit_tests
      - api_unit_tests
      - api_e2e_tests:
          requires:
            - api_unit_tests
      - api_build:
          requires:
            - api_e2e_tests
      - api_deploy:
          requires:
            - api_build
      - frontend_deploy:
          requires:
            - frontend_build
